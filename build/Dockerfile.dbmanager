# Этап сборки с Go и protoc
FROM golang:1.23-alpine AS builder

# Установка зависимостей для сборки
RUN apk add --no-cache git protobuf protobuf-dev

# Установка Go плагинов для protoc
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && \
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

# Установка рабочей директории
WORKDIR /app

# Копирование файлов зависимостей
COPY services/dbmanager/go.mod services/dbmanager/go.sum ./

# Загрузка зависимостей
RUN go mod download

# Копирование исходного кода
COPY services/dbmanager/ .

# Проверка содержимого migrations
RUN ls -la /app/migrations || echo 'NO MIGRATIONS DIR'

# Отладочная команда - проверим, что скопировалось
RUN ls -la

# Генерация protobuf используя готовый скрипт
RUN sh proto.sh build

# Сборка приложения
RUN go build -o main ./cmd/server

# Финальный образ
FROM alpine:latest

# Установка только необходимых пакетов
RUN apk --no-cache add postgresql-client bash

# Создание пользователя для безопасности
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Установка рабочей директории
WORKDIR /app

# Копирование бинарного файла из этапа сборки
COPY --from=builder /app/main .

# Копирование конфигурационных файлов
COPY services/dbmanager/config/config.local.yaml /app/config/config.local.yaml

# Копирование миграций
COPY --from=builder /app/migrations ./migrations

# Установка прав на выполнение для скрипта миграции
RUN chmod +x ./migrations/migrate.sh

# Переключение на непривилегированного пользователя
USER appuser

# Открытие порта
EXPOSE 50051

# Запуск приложения с отладкой
CMD sh -c 'echo "Starting migrations..." && ./migrations/migrate.sh up && echo "Migrations completed, starting application..." && ./main' 